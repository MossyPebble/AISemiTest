{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"gpuType":"T4","mount_file_id":"12C8GOuZVG4uo39PWTiivTwV_FPfx3QHa","authorship_tag":"ABX9TyNe2sIeGZx0fb0WN2DDpF9a"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","import torch.nn as nn\n","import torch\n","import matplotlib.pyplot as plt"],"metadata":{"id":"JNWDo7a3TIPu"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rl6nBPOHuHJG"},"outputs":[],"source":["def normalization(data):\n","    max_val = np.max(data)\n","    min_val = np.min(data)\n","\n","    return (data - min_val) / (max_val - min_val), max_val, min_val\n","\n","def reverse_normalization(data, max_val, min_val):\n","    return data * (max_val - min_val) + min_val\n","\n","def create_graph(x_data, y_data):\n","    return np.stack((x_data, y_data), axis=1)\n","\n","data = np.load(r'/content/drive/MyDrive/Colab Notebooks/data.npy')\n","label = np.load(r'/content/drive/MyDrive/Colab Notebooks/label.npy')\n","\n","\n","\n","max_data = np.min(data, axis=(0, 2), keepdims=True)\n","min_data = np.max(data, axis=(0, 2), keepdims=True)\n","\n","normal_data = (data - min_data) / (max_data - min_data)\n","\n","max_label = np.max(label, axis=0, keepdims=True)\n","min_label = np.min(label, axis=0, keepdims=True)\n","\n","normal_label = (label - min_label) / (max_label - min_label)\n","\n","np.save(r'/content/drive/MyDrive/Colab Notebooks/max_data.npy', max_data)\n","np.save(r'/content/drive/MyDrive/Colab Notebooks/min_data.npy', min_data)\n","np.save(r'/content/drive/MyDrive/Colab Notebooks/max_label.npy', max_label)\n","np.save(r'/content/drive/MyDrive/Colab Notebooks/min_label.npy', min_label)\n","np.save(r'/content/drive/MyDrive/Colab Notebooks/normal_data.npy', normal_data)"]},{"cell_type":"code","source":["data_count = len(normal_data)\n","\n","train_data = normal_data[:int(data_count /10 *8)]\n","val_data = normal_data[int(data_count /10 *8):int(data_count /10 *9)]\n","test_data = normal_data[int(data_count /10 *9):]\n","\n","train_label = normal_label[:int(data_count /10 *8)]\n","val_label = normal_label[int(data_count /10 *8):int(data_count /10 *9)]\n","test_label = normal_label[int(data_count /10 *9):]\n","\n","train_data.shape"],"metadata":{"id":"q2f0qK3WVppP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data = torch.FloatTensor(train_data)\n","val_data = torch.FloatTensor(val_data)\n","test_data = torch.FloatTensor(test_data)\n","\n","train_label = torch.FloatTensor(train_label)\n","val_label = torch.FloatTensor(val_label)\n","test_label = torch.FloatTensor(test_label)\n","\n","train_dataset = torch.utils.data.TensorDataset(train_data, train_label)\n","val_dataset = torch.utils.data.TensorDataset(val_data, val_label)\n","test_dataset = torch.utils.data.TensorDataset(test_data, test_label)\n","\n","train_dataloader = torch.utils.data.DataLoader(train_dataset, batch_size=128, shuffle=True)"],"metadata":{"id":"EYcZ9dNdN_By"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Model(nn.Module):\n","    def __init__(self):\n","        super(Model, self).__init__()\n","        self.flatten = nn.Flatten()\n","        self.layer1 = None\n","        self.layer2 = nn.Linear(1000, 1000)\n","        self.layer3 = nn.Linear(1000, 3)\n","\n","        torch.nn.init.xavier_normal_(self.layer2.weight)\n","        torch.nn.init.xavier_normal_(self.layer3.weight)\n","\n","        self.activation = nn.ReLU()\n","\n","    def forward(self, x):\n","        x = self.flatten(x)\n","        if self.layer1 == None:\n","            self.layer1 = nn.Linear(x.shape[1], 1000)\n","            torch.nn.init.xavier_normal_(self.layer1.weight)\n","        x = self.activation(self.layer1(x))\n","        x = self.activation(self.layer2(x))\n","        x = self.layer3(x)\n","        return x"],"metadata":{"id":"kASpOD5MFv90"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Model()\n","\n","epochs = 1200\n","losses = []\n","val_losses = []\n","creiterion = nn.MSELoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=1e-5)\n","\n","for i in range(epochs):\n","    optimizer.zero_grad()\n","\n","    y_pred = model(train_data)\n","    loss = creiterion(y_pred, train_label)\n","    val_losses.append(creiterion(model(val_data), val_label).item())\n","    losses.append(loss.item())\n","    loss.backward()\n","\n","    optimizer.step()\n","\n","    print('Epochs: ', i, '| Loss: ', loss.item(), '| Val_Loss: ', val_losses[-1])"],"metadata":{"id":"CU12BP28IVg1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.subplot(1, 2, 1)\n","plt.plot(range(epochs), losses)\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(range(epochs), val_losses)\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Val_Loss\")\n","plt.show()"],"metadata":{"id":"jzAJTO_hX_vy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print('Model Evaluation: ', creiterion(model(test_data), test_label).item())"],"metadata":{"id":"OuG3N0FpbZ3N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.save(model, r'/content/drive/MyDrive/Colab Notebooks/model.pt')"],"metadata":{"id":"wd_EYcJ4cuUB"},"execution_count":null,"outputs":[]}]}